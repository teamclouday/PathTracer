#pragma kernel CSMain

#include "Tracing/global.hlsl"
#include "Tracing/structures.hlsl"
#include "Tracing/random.hlsl"
#include "Tracing/functions.hlsl"
#include "Tracing/intersection.hlsl"

RWTexture2D<float4> _FrameNormalTarget;

// trace a ray and detect nearest hit
HitInfo Trace(Ray ray)
{
    HitInfo bestHit = CreateHitInfo();
    // check tlas intersection
    uint size, stride;
    _TNodes.GetDimensions(size, stride);
    for (uint i = 0; i < size; i++)
    {
        TLASNode node = _TNodes[i];
        Ray localRay = PrepareTreeEnterRay(ray, node.transformIdx);
        if (IntersectBox2(localRay, node.boundMax, node.boundMin))
        {
            // intersect with BLAS tree
            PrepareTreeEnterHit(localRay, bestHit, node.transformIdx);
            InersectBVHTree(localRay, bestHit, node.rootIdx, node.transformIdx);
            PrepareTreeExit(ray, bestHit, node.transformIdx);
        }
    }
    return bestHit;
}

// return shading info based on ray and hitinfo
float3 Shade(inout Ray ray, HitInfo hit)
{
    if (hit.dist < 1.#INF)
    {
        return hit.colors.emission + hit.colors.albedo;
    }
    else
    {
        // hit skybox
        float raySampleScale = max(max(abs(ray.dir.x), abs(ray.dir.y)), abs(ray.dir.z));
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, ray.dir / raySampleScale, 0).xyz;
    }
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // get output dimensions
    uint width, height;
    _FrameTarget.GetDimensions(width, height);
    // create camera
    Camera camera = CreateCamera();
    // save pixel center
    float2 center = float2(id.xy);
    PixelCenter = 2.0 * center / float2(width, height) - 1.0;
    // init random seed
    rng_initialize(center, _FrameCount);
    // generate ray from camera
    Ray ray = CreateCameraRay(camera, PixelCenter);
    // trace ray
    HitInfo hit = Trace(ray);
    // write albedo
    _FrameTarget[id.xy] = float4(saturate(Shade(ray, hit)), 1.0);
    // write normal
    _FrameNormalTarget[id.xy] = float4(hit.norm, 1.0);
    
}
