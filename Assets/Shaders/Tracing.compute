#pragma kernel CSMain

#include "Tracing/global.hlsl"
#include "Tracing/structures.hlsl"
#include "Tracing/random.hlsl"
#include "Tracing/functions.hlsl"
#include "Tracing/bxdf.hlsl"
#include "Tracing/intersection.hlsl"
#include "Tracing/colors.hlsl"

// trace a ray and returns hit immediately (for shadow rays)
bool TraceHit(Ray ray, float targetDist)
{
    HitInfo bestHit = CreateHitInfo();
    // check tlas intersection
    //return IntersectTlasTreeFast(ray, bestHit, targetDist);
    return IntersectTlasFast(ray, bestHit, targetDist);
}

// trace a ray and detect nearest hit
HitInfo Trace(Ray ray)
{
    HitInfo bestHit = CreateHitInfo();
    // check tlas intersection
    //IntersectTlasTree(ray, bestHit);
    IntersectTlas(ray, bestHit);
    return bestHit;
}

// return shading info based on ray and hitinfo
float3 Shade(inout Ray ray, HitInfo hit)
{
    if (hit.dist < 1.#INF)
    {
        //ray.energy = 0.0;
        //return hit.norm * 0.5 + 0.5;
        
        // sample directional light
        float3 lightContrib = 0.0;
        {
            Ray shadowRay = CreateRay(hit.pos + hit.norm * 1e-5, _DirectionalLight);
            if (_DirectionalLightColor.a > 0.0 && !TraceHit(shadowRay, 1.#INF))
            {
                lightContrib += hit.mat.albedo * saturate(dot(hit.norm, _DirectionalLight)) *
                    _DirectionalLightColor.rgb * _DirectionalLightColor.a;
            }
        }
        
        // sample point lights
        for (int i = 0; i < _PointLightsCount; i++)
        {
            float4 lightPos = _PointLights[i * 2];
            float4 lightColor = _PointLights[i * 2 + 1];
            if (lightColor.a <= 0.0)
                continue;
            float3 rayDir = lightPos.xyz - hit.pos;
            float rayDist = length(rayDir);
            // TODO: maybe can be changed to an variable
            float distDecay = max(0.0, rayDist - lightPos.w);
            distDecay = pow(0.2, distDecay * distDecay);
            rayDir /= rayDist;
            Ray shadowRay = CreateRay(hit.pos + hit.norm * 1e-5, rayDir);
            if (!TraceHit(shadowRay, rayDist))
            {
                lightContrib += hit.mat.albedo * saturate(dot(hit.norm, rayDir)) *
                    lightColor.rgb * lightColor.a * distDecay;
            }
        }
        
            float random = rand();
        if (hit.mode >= 3.0)
        {
            float outside = dot(ray.dir, hit.norm);
            hit.norm *= sign(outside);
            ray.origin = hit.pos + hit.norm * 1e-5;
            // dielectric workflow
            hit.norm = normalize(lerp(
                hit.norm,
                SampleHemisphere3(hit.norm),
                hit.mat.roughness * hit.mat.roughness
            ));
            float3 rayOutDir = normalize(reflect(ray.dir, hit.norm));
            float3 H = normalize(ray.dir + rayOutDir);
            float fresnel = DielectricFresnel(dot(H, ray.dir), hit.mat.ior);
            float reflChance = 1.0 - (1.0 - fresnel) * (1.0 - hit.mat.metallic);
            if (random < reflChance)
            {
                //rayOutDir = normalize(reflect(-ray.dir, H));
                SpecReflModel(hit, ray.dir, rayOutDir, H, ray.energy);
                ray.dir = rayOutDir;
                ray.energy *= 1.0 / clamp(reflChance, 1e-2, 1.0);
                lightContrib *= reflChance;
            }
            else
            {
                //rayOutDir = -normalize(refract(-ray.dir, H, 1.0 / hit.mat.ior));
                rayOutDir = normalize(refract(ray.dir, -hit.norm, 1.0 / hit.mat.ior));
                SpecRefrModel(hit, ray.dir, rayOutDir, H, ray.energy);
                ray.dir = rayOutDir;
                ray.energy *= 1.0 / clamp((1.0 - reflChance), 1e-2, 1.0);
                lightContrib *= reflChance;
            }

        }
        else
        {
            // metallic workflow
            ray.origin = hit.pos + hit.norm * 1e-5;
            float diffChance = dot(hit.mat.albedo, LUM) * (1.0 - hit.mat.metallic);
            if (random < diffChance)
            {
                float3 rayOutDir = normalize(SampleHemisphere4(hit.norm));
                float3 H = normalize(ray.dir + rayOutDir);
                DiffuseModel(hit, ray.dir, rayOutDir, H, ray.energy);
                ray.dir = rayOutDir;
                ray.energy *= 1.0 / clamp(diffChance, 1e-2, 1.0);
            }
            else
            {
                float3 rayOutDir = normalize(lerp(
                    reflect(ray.dir, hit.norm),
                    SampleHemisphere4(hit.norm),
                    hit.mat.roughness * hit.mat.roughness
                ));
                float3 H = normalize(ray.dir + rayOutDir);
                SpecReflModel(hit, ray.dir, rayOutDir, H, ray.energy);
                ray.dir = rayOutDir;
                ray.energy *= 1.0 / clamp((1.0 - diffChance), 1e-2, 1.0);
                lightContrib *= hit.mat.roughness * hit.mat.roughness;
            }
        }
        return hit.mat.emission + lightContrib;
        
    }
    else
    {
        // hit skybox
        ray.energy = 0.0;
        float raySampleScale = max(max(abs(ray.dir.x), abs(ray.dir.y)), abs(ray.dir.z));
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, ray.dir / raySampleScale, 0).xyz * _SkyboxIntensity;
    }
}

[numthreads(8, 8, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // get output dimensions
    uint width, height;
    _FrameTarget.GetDimensions(width, height);
    float2 idOffset = floor(_PixelOffset);
    uint2 targetIdx = id.xy + uint2(idOffset);
    if (targetIdx.x >= width || targetIdx.y >= height)
        return;
    // create camera
    Camera camera = CreateCamera(_PixelOffset - idOffset);
    // save pixel center
    float2 center = float2(targetIdx);
    // init random seed
    //rng_initialize(dot(center, camera.offset), _FrameCount);
    rng_initialize(center, _FrameCount);
    // generate ray from camera
    Ray ray = CreateCameraRay(camera, 2.0 * (center + camera.offset) / float2(width, height) - 1.0);
    // trace ray
    float3 color = 0.0;
    for (int i = 0; i < _TraceDepth; i++)
    {
        // get nearest ray hit
        HitInfo hit = Trace(ray);
        // accumulate energy (color)
        color += ray.energy * SRGB2Linear(Shade(ray, hit));
        // if ray has no energy, stop tracing
        if (!any(ray.energy))
            break;
    }
    // write to frame target
    float sampleCount = _FrameTarget[targetIdx].a;
    _FrameTarget[targetIdx] = float4(max(color, 0.0), sampleCount + 0.1);
}
